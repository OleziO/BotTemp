const TelegramBot = require('node-telegram-bot-api');

const token = '';

const bot = new TelegramBot(token, {
    polling: true
});

class Good {
    #name;
    #price;
    constructor(name, price) {
        this.#name = name;
        this.#price = price;
    }
    getName = () => "*" + this.#name + "*";
    getNameList = () => this.#name;
    getPrice = () => this.#price;
    print = () => {
        return this.getName() +
            `\n\n` + this.getPrice();
    }

}

let order = {};

let goods = [new Good('–°–ø–∏—Ä—Ç', '5–ª - 850–≥—Ä–Ω\n10–ª - 800–≥—Ä–Ω\n20–ª - 1500–≥—Ä–Ω\n40-80–ª - –ø–æ 65 –≥—Ä–Ω / 1 –ª\n100-200–ª - –ø–æ 60  / 1 –ª\n\n–î–ª—è –±—ñ–ª—å—à–∏—Ö –æ–±\'—î–º—ñ–≤ - —Ü—ñ–Ω–∞ –¥–æ–≥–æ–≤—ñ—Ä–Ω–∞'),
    new Good('–ì–æ—Ä—ñ–ª–∫–∞ –Ω–∞ —Ä–æ–∑–ª–∏–≤', '5-20–ª - 60 –≥—Ä–Ω / 1 –ª\n40–ª - 50 –≥—Ä–Ω / 1 –ª\n60-80–ª - 45 –≥—Ä–Ω / 1 –ª\n100–ª - 40–≥—Ä–Ω / 1 –ª\n200–ª —ñ –±—ñ–ª—å—à–µ, 35 –≥—Ä–Ω / 1 –ª'),
    new Good('–ì–æ—Ä—ñ–ª–∫–∞ 2–ª –≤ —Ç–µ—Ç—Ä–∞–ø–∞—Ü—ñ', '–§—ñ–Ω–ª—è–Ω–¥—ñ—è –∑–∞ —Å–º–∞–∫–æ–º —Å–º–æ—Ä–æ–¥–∏–Ω–∏\n–§—ñ–Ω–ª—è–Ω–¥—ñ—è –∑–∞ —Å–º–∞–∫–æ–º –∂—É—Ä–∞–≤–ª–∏–Ω–∏\n–§—ñ–Ω–ª—è–Ω–¥—ñ—è –∑–∞ —Å–º–∞–∫–æ–º –ª–∞–π–º–∞\n–§—ñ–Ω–ª—è–Ω–¥—ñ—è –∑–∞ —Å–º–∞–∫–æ–º –≥—Ä–µ–π–ø—Ñ—Ä—É—Ç–∞\n\n–ü–æ 250–≥—Ä–Ω –∑–∞ —à—Ç—É–∫—É'),
    new Good('–ì–æ—Ä—ñ–ª–∫–∞ 3–ª –≤ —Ç–µ—Ç—Ä–∞–ø–∞—Ü—ñ', '–§—ñ–Ω–ª—è–Ω–¥—ñ—è –º—è—Ç–Ω–∞\n–ê–±—Å–æ–ª—é—Ç–Ω–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç\n\n–ü–æ 250–≥—Ä–Ω –∑–∞ —à—Ç—É–∫—É'),
    new Good('–ì–æ—Ä—ñ–ª–∫–∞ 10–ª –≤ —Ç–µ—Ç—Ä–∞–ø–∞—Ü—ñ (–∑ –∫—Ä–∞–Ω–∏–∫–æ–º)', '1-2\t—à—Ç –ø–æ 400–≥—Ä–Ω –∑–∞ —à—Ç—É–∫—É\n5\t—à—Ç –ø–æ 350–≥—Ä–Ω –∑–∞ —à—Ç—É–∫—É\n10\t—à—Ç –ø–æ 300–≥—Ä–Ω –∑–∞ —à—Ç—É–∫—É\n\n–î–ª—è –±—ñ–ª—å—à–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ - —Ü—ñ–Ω–∞ –¥–æ–≥–æ–≤—ñ—Ä–Ω–∞'),
    new Good('–ó—É–±—Ä—ñ–≤–∫–∞', '5-20–ª - 80 –≥—Ä–Ω / 1 –ª\n40–ª - 70–≥—Ä–Ω / 1–ª\n60-80–ª - 65 –≥—Ä–Ω / 1 –ª\n100–ª - 60 / 1 –ª'),
    new Good('–ö–æ–Ω—å—è–∫ –∫–ª–∞—Å–∏—á–Ω–∏–π', '5-20–ª - 70 –≥—Ä–Ω / 1 –ª\n40–ª - 60 –≥—Ä–Ω \ 1 –ª\n60-80–ª - 60 –≥—Ä–Ω / 1 –ª\n100–ª - 50 –≥—Ä–Ω / 1 –ª\n200–ª - 45 –≥—Ä–Ω / 1 –ª'),
    new Good('–ö–æ–Ω—å—è–∫ —à–æ–∫–æ–ª–∞–¥–Ω–∏–π', '5-20–ª - 70 –≥—Ä–Ω / 1 –ª\n40–ª - 60 –≥—Ä–Ω \ 1 –ª\n60-80–ª - 60 –≥—Ä–Ω / 1 –ª\n100–ª - 50 –≥—Ä–Ω / 1 –ª\n200–ª - 45 –≥—Ä–Ω / 1 –ª'),
    new Good('–ö–æ–Ω—å—è–∫ –º–∏–≥–¥–∞–ª—å–Ω–∏–π', '5-20–ª - 70 –≥—Ä–Ω / 1 –ª\n40–ª - 60 –≥—Ä–Ω \ 1 –ª\n60-80–ª - 60 –≥—Ä–Ω / 1 –ª\n100–ª - 50 –≥—Ä–Ω / 1 –ª\n200–ª - 45 –≥—Ä–Ω / 1 –ª'),
    new Good('–ö–æ–Ω—å—è–∫ –≤ —Ç–µ—Ç—Ä–∞–ø–∞—Ü—ñ 2–ª', 'Courvoisier\nMetaxa\nKVINT\n\n–ü–æ 300 –≥—Ä–Ω –∑–∞ —à—Ç—É–∫—É'),
    new Good('–í—ñ—Å–∫—ñ –≤ —Ç–µ—Ç—Ä–∞–ø–∞—Ü—ñ 2–ª', 'Chivas 12\nJack Denials \nJack Denials –ú–µ–¥–æ–≤–∏–π\nJameson\n\n–ü–æ 300 –≥—Ä–Ω –∑–∞ —à—Ç—É–∫—É')
];

let keyboard = [];

const buyKeys = [
    [{
        text: "üçæ–ö—É–ø–∏—Ç–∏",
        callback_data: `buyItem`
    }],
    [{
        text: "‚ùå–°—Ö–æ–≤–∞—Ç–∏",
        callback_data: "delete"
    }]
];

for (let i = 0; i < goods.length; i++) {
    keyboard.push([{
        text: goods[i].getNameList(), // —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø—Ü—ñ
        callback_data: `item${i}` // –¥–∞–Ω—ñ –¥–ª—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–¥—ñ–π
    }]);
}

bot.on('callback_query', (query) => {
    const chatId = query.message.chat.id;
    for (let i = 0; i < keyboard.length; i++) {
        if (query.data === `item${i}`) {
            bot.sendPhoto(chatId, `item${i}.jpg`, {
                caption: `${goods[i].print()}`,
                parse_mode: "Markdown",
                reply_markup: {
                    inline_keyboard: buyKeys
                }
            });
            break;
        }
    }

    if (query.data === `buyItem`) {
        let tempObj = {
            text: query.message.caption.split('\n')[0],
            count: true,
            name: false,
            contactNum: false,
            address: false,
        }
        order[chatId] = tempObj;
        bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ');
    }

    if (query.data === `delete`) {
        try {
            bot.deleteMessage(chatId, query.message.message_id);
        } catch (err) {
            console.log(err.message);
        }
    }

});


bot.on("message", (msg) => {
    const chatId = msg.chat.id;
    try {
        if (msg.text != "/start" && order[chatId]["count"] == true && !isNaN(msg.text)) {
            order[chatId]["text"] += "\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å: " + msg.text;
            order[chatId]["count"] = false;
            order[chatId]["name"] = true;
            bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –í–∞—à –ü–Ü–ü: ');
        } else if (msg.text != "/start" && order[chatId]["name"]) {
            order[chatId]["text"] += "\n–Ü–º\'—è: " + msg.text;
            order[chatId]["name"] = false;
            order[chatId]["contactNum"] = true;
            bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ');
        } else if (msg.text != "/start" && order[chatId]["contactNum"]) {
            order[chatId]["text"] += "\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: " + msg.text;
            bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ [–ú—ñ—Å—Ç–æ, –∞–¥—Ä–µ—Å–∞, –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏]: ');
            order[chatId]["contactNum"] = false;
            order[chatId]["address"] = true;
        } else if (msg.text != "/start" && order[chatId]["address"]) {
            order[chatId]["text"] += "\n–ê–¥—Ä–µ—Å–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: " + msg.text;
            order[chatId]["address"] = false;
            bot.sendMessage(chatId, '–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –∑ –í–∞–º–∏ –∑–≤\'—è–∂–µ—Ç—å—Å—è –Ω–∞—à –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è,');
            bot.sendMessage(1270066483, order[chatId]["text"]);
        } else if (msg.text != "/start" && order[chatId]["count"] == true && isNaN(msg.text)) {
            bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ');
        }
    } catch (err) {
        console.log(err.message);
    }
});

bot.on("polling_error", console.log);

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '–ü—Ä–∏–≤—ñ—Ç, –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –∑–∞–π–º–∞—î—Ç—å—Å—è –ø—Ä–æ–¥–∞–∂–æ–º *–ì–æ—Ä—ñ–ª—á–∞–Ω–∏—Ö –≤–∏—Ä–æ–±—ñ–≤*, –æ–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä, —è–∫–∏–π —Ç–æ–±—ñ –¥–æ –≤–ø–æ–¥–æ–±–∏: ', {
        parse_mode: "Markdown",
        reply_markup: {
            inline_keyboard: keyboard
        }
    });
});